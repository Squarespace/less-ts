import { hexvalue } from './string';

export type ColorFields = [number, number, number];

class ColorNames {

  rgbToName: { [x: number]: string } = {};
  nameToRgb: { [x: string]: ColorFields } = {};

  constructor() {
    this.grey(0x00, 'black');
    this.grey(0x00, 'black');
    this.grey(0xa9, 'darkgray');
    this.grey(0xa9, 'darkgrey');
    this.grey(0x69, 'dimgray');
    this.grey(0x69, 'dimgrey');
    this.grey(0xdc, 'gainsboro');
    this.grey(0x80, 'gray');
    this.grey(0x80, 'grey');
    this.grey(0xd3, 'lightgray');
    this.grey(0xd3, 'lightgrey');
    this.grey(0xc0, 'silver');
    this.grey(0xff, 'white');
    this.grey(0xf5, 'whitesmoke');

    this.rgb(0xf0, 0xf8, 0xff, 'aliceblue');
    this.rgb(0xfa, 0xeb, 0xd7, 'antiquewhite');
    this.rgb(0x00, 0xff, 0xff, 'aqua');
    this.rgb(0x7f, 0xff, 0xd4, 'aquamarine');
    this.rgb(0xf0, 0xff, 0xff, 'azure');
    this.rgb(0xf5, 0xf5, 0xdc, 'beige');
    this.rgb(0xff, 0xe4, 0xc4, 'bisque');
    this.rgb(0xff, 0xeb, 0xcd, 'blanchedalmond');
    this.rgb(0x00, 0x00, 0xff, 'blue');
    this.rgb(0x8a, 0x2b, 0xe2, 'blueviolet');
    this.rgb(0xa5, 0x2a, 0x2a, 'brown');
    this.rgb(0xde, 0xb8, 0x87, 'burlywood');
    this.rgb(0x5f, 0x9e, 0xa0, 'cadetblue');
    this.rgb(0x7f, 0xff, 0x00, 'chartreuse');
    this.rgb(0xd2, 0x69, 0x1e, 'chocolate');
    this.rgb(0xff, 0x7f, 0x50, 'coral');
    this.rgb(0x64, 0x95, 0xed, 'cornflowerblue');
    this.rgb(0xff, 0xf8, 0xdc, 'cornsilk');
    this.rgb(0xdc, 0x14, 0x3c, 'crimson');
    this.rgb(0x00, 0xff, 0xff, 'cyan');
    this.rgb(0x00, 0x00, 0x8b, 'darkblue');
    this.rgb(0x00, 0x8b, 0x8b, 'darkcyan');
    this.rgb(0xb8, 0x86, 0x0b, 'darkgoldenrod');
    this.rgb(0x00, 0x64, 0x00, 'darkgreen');
    this.rgb(0xbd, 0xb7, 0x6b, 'darkkhaki');
    this.rgb(0x8b, 0x00, 0x8b, 'darkmagenta');
    this.rgb(0x55, 0x6b, 0x2f, 'darkolivegreen');
    this.rgb(0xff, 0x8c, 0x00, 'darkorange');
    this.rgb(0x99, 0x32, 0xcc, 'darkorchid');
    this.rgb(0x8b, 0x00, 0x00, 'darkred');
    this.rgb(0xe9, 0x96, 0x7a, 'darksalmon');
    this.rgb(0x8f, 0xbc, 0x8f, 'darkseagreen');
    this.rgb(0x48, 0x3d, 0x8b, 'darkslateblue');
    this.rgb(0x2f, 0x4f, 0x4f, 'darkslategray');
    this.rgb(0x2f, 0x4f, 0x4f, 'darkslategrey');
    this.rgb(0x00, 0xce, 0xd1, 'darkturquoise');
    this.rgb(0x94, 0x00, 0xd3, 'darkviolet');
    this.rgb(0xff, 0x14, 0x93, 'deeppink');
    this.rgb(0x00, 0xbf, 0xff, 'deepskyblue');
    this.rgb(0x1e, 0x90, 0xff, 'dodgerblue');
    this.rgb(0xb2, 0x22, 0x22, 'firebrick');
    this.rgb(0xff, 0xfa, 0xf0, 'floralwhite');
    this.rgb(0x22, 0x8b, 0x22, 'forestgreen');
    this.rgb(0xff, 0x00, 0xff, 'fuchsia');
    this.rgb(0xf8, 0xf8, 0xff, 'ghostwhite');
    this.rgb(0xff, 0xd7, 0x00, 'gold');
    this.rgb(0xda, 0xa5, 0x20, 'goldenrod');
    this.rgb(0x00, 0x80, 0x00, 'green');
    this.rgb(0xad, 0xff, 0x2f, 'greenyellow');
    this.rgb(0xf0, 0xff, 0xf0, 'honeydew');
    this.rgb(0xff, 0x69, 0xb4, 'hotpink');
    this.rgb(0xcd, 0x5c, 0x5c, 'indianred');
    this.rgb(0x4b, 0x00, 0x82, 'indigo');
    this.rgb(0xff, 0xff, 0xf0, 'ivory');
    this.rgb(0xf0, 0xe6, 0x8c, 'khaki');
    this.rgb(0xe6, 0xe6, 0xfa, 'lavender');
    this.rgb(0xff, 0xf0, 0xf5, 'lavenderblush');
    this.rgb(0x7c, 0xfc, 0x00, 'lawngreen');
    this.rgb(0xff, 0xfa, 0xcd, 'lemonchiffon');
    this.rgb(0xad, 0xd8, 0xe6, 'lightblue');
    this.rgb(0xf0, 0x80, 0x80, 'lightcoral');
    this.rgb(0xe0, 0xff, 0xff, 'lightcyan');
    this.rgb(0xfa, 0xfa, 0xd2, 'lightgoldenrodyellow');
    this.rgb(0x90, 0xee, 0x90, 'lightgreen');
    this.rgb(0xff, 0xb6, 0xc1, 'lightpink');
    this.rgb(0xff, 0xa0, 0x7a, 'lightsalmon');
    this.rgb(0x20, 0xb2, 0xaa, 'lightseagreen');
    this.rgb(0x87, 0xce, 0xfa, 'lightskyblue');
    this.rgb(0x77, 0x88, 0x99, 'lightslategray');
    this.rgb(0x77, 0x88, 0x99, 'lightslategrey');
    this.rgb(0xb0, 0xc4, 0xde, 'lightsteelblue');
    this.rgb(0xff, 0xff, 0xe0, 'lightyellow');
    this.rgb(0x00, 0xff, 0x00, 'lime');
    this.rgb(0x32, 0xcd, 0x32, 'limegreen');
    this.rgb(0xfa, 0xf0, 0xe6, 'linen');
    this.rgb(0xff, 0x00, 0xff, 'magenta');
    this.rgb(0x80, 0x00, 0x00, 'maroon');
    this.rgb(0x66, 0xcd, 0xaa, 'mediumaquamarine');
    this.rgb(0x00, 0x00, 0xcd, 'mediumblue');
    this.rgb(0xba, 0x55, 0xd3, 'mediumorchid');
    this.rgb(0x93, 0x70, 0xd8, 'mediumpurple');
    this.rgb(0x3c, 0xb3, 0x71, 'mediumseagreen');
    this.rgb(0x7b, 0x68, 0xee, 'mediumslateblue');
    this.rgb(0x00, 0xfa, 0x9a, 'mediumspringgreen');
    this.rgb(0x48, 0xd1, 0xcc, 'mediumturquoise');
    this.rgb(0xc7, 0x15, 0x85, 'mediumvioletred');
    this.rgb(0x19, 0x19, 0x70, 'midnightblue');
    this.rgb(0xf5, 0xff, 0xfa, 'mintcream');
    this.rgb(0xff, 0xe4, 0xe1, 'mistyrose');
    this.rgb(0xff, 0xe4, 0xb5, 'moccasin');
    this.rgb(0xff, 0xde, 0xad, 'navajowhite');
    this.rgb(0x00, 0x00, 0x80, 'navy');
    this.rgb(0xfd, 0xf5, 0xe6, 'oldlace');
    this.rgb(0x80, 0x80, 0x00, 'olive');
    this.rgb(0x6b, 0x8e, 0x23, 'olivedrab');
    this.rgb(0xff, 0xa5, 0x00, 'orange');
    this.rgb(0xff, 0x45, 0x00, 'orangered');
    this.rgb(0xda, 0x70, 0xd6, 'orchid');
    this.rgb(0xee, 0xe8, 0xaa, 'palegoldenrod');
    this.rgb(0x98, 0xfb, 0x98, 'palegreen');
    this.rgb(0xaf, 0xee, 0xee, 'paleturquoise');
    this.rgb(0xd8, 0x70, 0x93, 'palevioletred');
    this.rgb(0xff, 0xef, 0xd5, 'papayawhip');
    this.rgb(0xff, 0xda, 0xb9, 'peachpuff');
    this.rgb(0xcd, 0x85, 0x3f, 'peru');
    this.rgb(0xff, 0xc0, 0xcb, 'pink');
    this.rgb(0xdd, 0xa0, 0xdd, 'plum');
    this.rgb(0xb0, 0xe0, 0xe6, 'powderblue');
    this.rgb(0x80, 0x00, 0x80, 'purple');
    this.rgb(0xff, 0x00, 0x00, 'red');
    this.rgb(0xbc, 0x8f, 0x8f, 'rosybrown');
    this.rgb(0x41, 0x69, 0xe1, 'royalblue');
    this.rgb(0x8b, 0x45, 0x13, 'sthis.rgblebrown');
    this.rgb(0xfa, 0x80, 0x72, 'salmon');
    this.rgb(0xf4, 0xa4, 0x60, 'sandybrown');
    this.rgb(0x2e, 0x8b, 0x57, 'seagreen');
    this.rgb(0xff, 0xf5, 0xee, 'seashell');
    this.rgb(0xa0, 0x52, 0x2d, 'sienna');
    this.rgb(0x87, 0xce, 0xeb, 'skyblue');
    this.rgb(0x6a, 0x5a, 0xcd, 'slateblue');
    this.rgb(0x70, 0x80, 0x90, 'slategray');
    this.rgb(0x70, 0x80, 0x90, 'slategrey');
    this.rgb(0xff, 0xfa, 0xfa, 'snow');
    this.rgb(0x00, 0xff, 0x7f, 'springgreen');
    this.rgb(0x46, 0x82, 0xb4, 'steelblue');
    this.rgb(0xd2, 0xb4, 0x8c, 'tan');
    this.rgb(0x00, 0x80, 0x80, 'teal');
    this.rgb(0xd8, 0xbf, 0xd8, 'thistle');
    this.rgb(0xff, 0x63, 0x47, 'tomato');
    this.rgb(0x40, 0xe0, 0xd0, 'turquoise');
    this.rgb(0xee, 0x82, 0xee, 'violet');
    this.rgb(0xf5, 0xde, 0xb3, 'wheat');
    this.rgb(0xff, 0xff, 0x00, 'yellow');
    this.rgb(0x9a, 0xcd, 0x32, 'yellowgreen');
  }

  private grey(c: number, name: string): void {
    this.rgb(c, c, c, name);
  }

  private rgb(r: number, g: number, b: number, name: string): void {
    this.nameToRgb[name] = [r, g, b];
    this.rgbToName[rgbToInt(r, g, b)] = name;
  }

}

const rgbToInt = (r: number, g: number, b: number): number => (r << 16) + (g << 8) + b;

export const rgbToName = (r: number, g: number, b: number): string | undefined => {
  const n = rgbToInt(r, g, b);
  return COLOR_NAMES.rgbToName[n];
};

export const nameToRGB = (name: string): ColorFields | undefined =>
  COLOR_NAMES.nameToRgb[name];

export const hexToRGB = (raw: string): ColorFields => {
  let start = 0;
  let len = raw.length;
  while (start < len && raw[start] === '#') {
    len--;
    start++;
  }

  let c0 = 0;
  let c1 = 0;
  let c2 = 0;
  if (len === 3) {
    c0 = comp1(raw[start]);
    c1 = comp1(raw[start + 1]);
    c2 = comp1(raw[start + 2]);
  } else if (len === 6) {
    c0 = comp2(raw[start], raw[start + 1]);
    c1 = comp2(raw[start + 2], raw[start + 3]);
    c2 = comp2(raw[start + 4], raw[start + 5]);
  }
  return [c0, c1, c2];
};

const comp1 = (ch: string): number => comp2(ch, ch);

const comp2 = (c0: string, c1: string): number => (hexvalue(c0) << 4) + hexvalue(c1);

const COLOR_NAMES = new ColorNames();
